{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"@spfxappdev/storage \u00b6 @spfxappdev/storage is a library to handle the javascript localStorage and sessionStorage in a simple way. It comes with a built-in expiration logic (per default 60 minutes ). It is possible to delete the entire storage or only a specific one via URL parameters. The included decorators simplify the application and keep the code short and simple, because you only have to implement the logic (of your method) itself and not the caching (see decorators section ). Installation \u00b6 npm i @spfxappdev/storage Usage \u00b6 Depending on which type of caching you want to use ( localStorage or sessionStorage ) you must first import the class(es). But regardless of the type, the logic and handling is the same for both classes. 1. import the storage class(es) into your project \u00b6 import { LocalStorage , SessionStorage } from '@spfxappdev/storage' ; 2. You can create an instance now. \u00b6 const sessionCache = new SessionStorage (); const localCache = new LocalStorage (); 3. Set/Get Data \u00b6 Set/Get Data Example sessionCache . set ( \"mySessionStorageKey\" , \"mySessionStorageValue\" ); let dataFromCache = sessionCache . get ( \"mySessionStorageKey\" ); console . log ( dataFromCache ); //RESULT: mySessionStorageValue const myObj = { name : '@spfxappdev/storage' , install : 'npm i @spfxappdev/storage' , author : 'SPFxAppDev' }; localCache . set ( \"myLocalStorageKey\" , myObj ); console . log ( myObj ); //RESULT: (1) { name: '@spfxappdev/storage', install: 'npm i @spfxappdev/storage', author: 'SPFxAppDev' } 4. Get data or set data with callback function if not available \u00b6 let dataFromCache = localCache . get ( \"myLocalStorageKey\" , () => { //Note: (1) return { name : '@spfxappdev/storage' , install : 'npm i @spfxappdev/storage' , author : 'SPFxAppDev' }; }); If the storage key does not exist or the cache has expired, the callback function is executed. The return value of this callback function is used to store the value in the cache with the specified key . API \u00b6 TBD","title":"Home"},{"location":"#spfxappdevstorage","text":"@spfxappdev/storage is a library to handle the javascript localStorage and sessionStorage in a simple way. It comes with a built-in expiration logic (per default 60 minutes ). It is possible to delete the entire storage or only a specific one via URL parameters. The included decorators simplify the application and keep the code short and simple, because you only have to implement the logic (of your method) itself and not the caching (see decorators section ).","title":"@spfxappdev/storage"},{"location":"#installation","text":"npm i @spfxappdev/storage","title":"Installation"},{"location":"#usage","text":"Depending on which type of caching you want to use ( localStorage or sessionStorage ) you must first import the class(es). But regardless of the type, the logic and handling is the same for both classes.","title":"Usage"},{"location":"#1-import-the-storage-classes-into-your-project","text":"import { LocalStorage , SessionStorage } from '@spfxappdev/storage' ;","title":"1. import the storage class(es) into your project"},{"location":"#2-you-can-create-an-instance-now","text":"const sessionCache = new SessionStorage (); const localCache = new LocalStorage ();","title":"2. You can create an instance now."},{"location":"#3-setget-data","text":"Set/Get Data Example sessionCache . set ( \"mySessionStorageKey\" , \"mySessionStorageValue\" ); let dataFromCache = sessionCache . get ( \"mySessionStorageKey\" ); console . log ( dataFromCache ); //RESULT: mySessionStorageValue const myObj = { name : '@spfxappdev/storage' , install : 'npm i @spfxappdev/storage' , author : 'SPFxAppDev' }; localCache . set ( \"myLocalStorageKey\" , myObj ); console . log ( myObj ); //RESULT: (1) { name: '@spfxappdev/storage', install: 'npm i @spfxappdev/storage', author: 'SPFxAppDev' }","title":"3. Set/Get Data"},{"location":"#4-get-data-or-set-data-with-callback-function-if-not-available","text":"let dataFromCache = localCache . get ( \"myLocalStorageKey\" , () => { //Note: (1) return { name : '@spfxappdev/storage' , install : 'npm i @spfxappdev/storage' , author : 'SPFxAppDev' }; }); If the storage key does not exist or the cache has expired, the callback function is executed. The return value of this callback function is used to store the value in the cache with the specified key .","title":"4. Get data or set data with callback function if not available"},{"location":"#api","text":"TBD","title":"API"}]}